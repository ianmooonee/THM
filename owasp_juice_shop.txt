We will now change the "a" next to the email to: ' or 1=1-- and forward it to the server.
Why does this work?
The character ' will close the brackets in the SQL query
'OR' in a SQL statement will return true if either side of it is true. As 1=1 is always true, the whole statement is true. Thus it will tell the server that the email is valid, and log us into user id 0, which happens to be the administrator account.
The -- character is used in SQL to comment out data, any restrictions on the login will no longer work as they are interpreted as a comment. This is like the # and // comment in python and javascript respectively.

Similar to what we did in Question #1, we will now log into Bender's account! Capture the login request again, but this time we will put: bender@juice-sh.op'-- as the email. 
Now, forward that to the server!
But why don't we put the 1=1?
Well, as the email address is valid (which will return true), we do not need to force it to be true. Thus we are able to use '-- to bypass the login system. Note the 1=1 can be used when the email or username is not known or invalid.

https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication.html

https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html

We will now go back to the  http://10.10.225.119/ftp/ folder and try to download package.json.bak. But it seems we are met with a 403 which says that only .md and .pdf files can be downloaded. 
To get around this, we will use a character bypass called "Poison Null Byte". A Poison Null Byte looks like this: %00. 
Note that we can download it using the url, so we will encode this into a url encoded format.
The Poison Null Byte will now look like this: %2500. Adding this and then a .md to the end will bypass the 403 error!
Why does this work? 
A Poison Null Byte is actually a NULL terminator. By placing a NULL character in the string at a certain byte, the string will tell the server to terminate at that point, nulling the rest of the string. 

When Broken Access Control exploits or bugs are found, it will be categorised into one of two types:
Horizontal Privilege Escalation - Occurs when a user can perform an action or access data of another user with the same level of permissions.
Vertical Privilege Escalation - Occurs when a user can perform an action or access data of another user with a higher level of permissions.

https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html

SS or Cross-site scripting is a vulnerability that allows attackers to run javascript in web applications. These are one of the most found bugs in web applications. Their complexity ranges from easy to extremely hard, as each web application parses the queries in a different way.
There are three major types of XSS attacks:
DOM (Special) - DOM XSS (Document Object Model-based Cross-site Scripting) uses the HTML environment to execute malicious javascript. This type of attack commonly uses the <script></script> HTML tag.
Persistent (Server-side) - Persistent XSS is javascript that is run when the server loads the page containing it. These can occur when the server does not sanitise the user data when it is uploaded to a page. These are commonly found on blog posts. 
Reflected (Client-side) - Reflected XSS is javascript that is run on the client-side end of the web application. These are most commonly found when the server doesn't sanitise search data.

https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS).html

http://10.10.225.119/metrics

https://securitytxt.org/
